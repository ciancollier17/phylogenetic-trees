const loadFASTA = require('./loadFASTA')

let root = "./testFASTAS/";

test("Loads a FASTA with one sequence", () => {
  return loadFASTA(root + "test1.fasta").then(data => {
    expect(data[0]).toEqual([
      "Test Sequence",
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" +
      "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"]);

    expect(data.length).toEqual(1);
  });
});

test("Loads a FASTA with multiple sequences", () => {
  return loadFASTA(root + "test2.fasta").then(data => {
    expect(data[0]).toEqual([
      "Test Sequence 1",
      "ATCGATCGGGGGATGATGATCGATCGGGGGATGATGATCGATCGGGGGATGATG" +
      "ATCGATCGGGGGATGATGATCGATCGGGGGATGATGATCGATCGGGGGATGATG" +
      "ATCGATCGGGGGATGATGATCGATCGGGGGATGATGATCGATCGGGGGATGATG" +
      "ATCGATCGGGGGATGATGATCGATCGGGGGATGATGATCGATCGGGGGATGATG" +
      "ATCGATCGGGGGATGATGATCGATCGGGGGATGATGATCGATCGGGGGATGATG" +
      "ATCGATCGGGGGATGATG"]);

    expect(data[1]).toEqual([
      "Test Sequence 2",
      "TATATATATATATGGGGTTTTTTAAACCCCCTATATATATATATGGGGTTTTTT" +
      "TATATATATATATGGGGTTTTTTAAACCCCCTATATATATATATGGGGTTTTTT" +
      "TATATATATATATGGGGTTTTTTAAACCCCCTATATATATATATGGGGTTTTTT" +
      "TACTACTAC"
    ]);

    expect(data.length).toEqual(2);
  });
});

test("Promise rejection if FASTA contains invalid characters", () => {
  return expect(loadFASTA(root + "test3.fasta")).rejects.toMatch("loadFASTA: Invalid FASTA file.");
});

test("Loads real data (mt genomes) with gaps", () => {
  return loadFASTA(root + "test4.fasta").then(data => {
    expect(data[0]).toEqual([
      "NC_002546.1:6871-8403 Fasciola hepatica mitochondrion, complete genome",
      "---------ATGAGTTGGTTGTTTACGTTGGATCATAAGCGTGTTGGTTTGATTTATATG" +
      "GTTATTGGTCTTTGGGGGGGGTTTTTTGGTCTTTCTTTGAGGGTGTTGGTTCGTTTGAAT" +
      "TATTTAGATCCATATTTTAATTTGGTTTCTCCTGAAGTTTATAATTATGTTGTTACTGGG" +
      "CATGGGATTATAATGATTTTTTTCTTTTTGATGCCGGTGTTGATTGGGGGTTTTGGTAAT" +
      "TATTTGTTGCCTTTATTGTTAGGTATTCCTGATTTGAATTTGCCTCGTTTAAATGCTTTG" +
      "AGTGCTTGGTTGTTATTTCCTGCTTGTGTTTGTTTGCCTTTTGGTT------TGATAGGG" +
      "GGTGTAGGTGTTGGTTGAACTTTTTATCCACCTCTTTCTAGGTT---GGATTATTCTAGG" +
      "TGGGGGGTTGATTTTTTGATGTTTTCTCTTCATTTGGCTGGGGTTTCTAGTCTTTTAGGT" +
      "TCTATTAAATTTATTTGTACTATTTTAGAGGTTATGTTGGATGAGGGTACGGGTC---GG" +
      "CATAGTATTTTGGTTTGGGCTTATCTATTTACTTCTGTTTTATTGTTGTTGTCATTGCCT" +
      "GTTTTGGCTGCTGCTATTACTATGTTGTTATTTGATCGTAAATTTGGTTCTGCTTTTTTT" +
      "GATCCTATGGGAGGTGGGGATCCTGTTTTATTTCAGCATTTGTTTTGGTTTTTTGGGCAT" +
      "CCTGAGGTTTATGTTTTGATTTTACCCGGGTTTGGGGTTATTAGTCATATTTGTGTGACT" +
      "TTAACTAATAATGATTCTTTGTTTGGTTATTATGGTCTTATTTTAGCTATGGCTGCTATA" +
      "GTATGTTTAGGTAGTGTTGTTTGGGCTCATCATATGTTTATGGTGGGTTTGGATGTGCAT" +
      "ACTGCTGTTTTTTTTAGTTCTGTTACTATGGTTATTGGTATTCCTACAGGTATTAAGGTC" +
      "TTTTCCTGGTTGATAATGTTGGGGGGGGGTAGTTCTGTTCGTATATGGGATCCTGTTGTG" +
      "TGGTGAATTATAGGGTTTATTGTTTTATTTACTATTGGTGGGGTTACTGGTATTATGCTT" +
      "TCTGCTTCTCTTTTGGATACTTTGCTTCATGATACATGGTTTGTGGTTGCTCATTTTCAT" +
      "TATGTTCTTTCTTTAGGGTCTTATAGAAGTGTTGTTATCTCTTTTATTTGGTGGTGGCCT" +
      "GTTGTGACTGGTTATAGTTTGAATCTTTTCATGTTGCAAGGTCATTGGGTTGTTTCTATG" +
      "ATTGGGTTTAATATGTGTTTTTTCCCTATGCACTACCTTGGTATGGCGGGGTTGCCTCGC" +
      "CGGGTTTGTGTTTATGATCCGGATTTTTATTGGCTTAGTGTTGTTTCTAGTTTAGGTGCT" +
      "CTTGTCTCGGCAGGTAGTGCCTTTTTGTTTGTGTTTATTTTGTGGGAGTCCTTTGTTGTA" +
      "GGTAATTGTGTTGTCTCTTCTTGAGGTAGCAGGTCTTTAGTGTTGAATGTTATTACTTTG" +
      "CCAGGTCCTCAACATAATAGTTATATGAATGGTGTTGGTCGCTGGGTTTTTTAG--"
    ]);

    expect(data.length).toEqual(4)
  });
});
